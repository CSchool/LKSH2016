--[[

=== Как создавать состояние (state) игры (рассматривается на примере game): ===

1. Создать файл <названиеСостояния>.lua (например, game.lua)
2. В начале файла объявить таблицу, в которой будет храниться состояние игры

local game = {}

3. Описать функции состояния:

--[[
! ВАЖНО !
Необходимо смотреть на логику работы состояния и выбирать, какие функции нужны для работы!
--]]

function game:init()
    --[[
    Вызывается один раз, когда происходит переключение на это состояние,
    если же переключение происходит второй, третий и т.д. раз, 
    то эта функция вызываться не будет!
    Т.е. она необходима для инициализации каких-либо связанных с состоянием ресурсов (например, картинок/звуков)
    --]]
end

function game:update(dt)
    --[[
    Обновление состояния, dt - сколько времени прошло с предыдущего апдейта,
    необходима как и для состояния "Игра" (потому что объекты двигать нужно), 
    так и для состояний "Меню", "Пауза" и т.д. (игровой интерфейс с кнопками обновляется точно так же)
    --]]
end

function game:draw()
    --[[
    Отрисовка текущего состояния
    --]]
 end   
function game:keypressed(key, code)
    --[[
    Обработка нажатой клавиши
    --]]
end

function game:keyreleased(key, code)
    --[[
    Обработка отпущенной клавиши
    --]]
end

--И =т.д. (см. http://hump.readthedocs.io/en/latest/gamestate.html#gamestate-callbacks для остальных функций)

--4. Вернуть таблицу из файла после описания всех функций

return game

--5. Подключить глобально состояние в файле main.lua

--game = require "game"

--Всё, ваше состояние готово! :)

--=== Как переключаться между состояниями ===

--Из-за того, что gamestate и прочие состояния (game, pause, menu и т.д.) объявлены глобально, то переходы можно производить в любом месте из любого состояния:

--gamestate.switch(state)

--Пример:

---gamestate.switch(game) -- перключаемся на состояние "Игра"

--]] 