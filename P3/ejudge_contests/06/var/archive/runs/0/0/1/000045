#include <iostream>
#include <queue>

using namespace std;

int main() {

	int n, k, dirx[4] = { -1, 0, 1, 0 }, diry[4] = {0, 1, 0, -1};

	cin >> n >> k;

	vector<vector<int>> vec(n, vector<int>(n, 0)), len(n, vector<int>(n, 0)), step(n, vector<int>(n, 0));

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> vec[i][j];
		}
	}

	queue<int> qx, qy;
	int x = 0, y = 0;

	len[x][y] = vec[x][y];
	step[x][y] = 1;
	qx.push(x); qy.push(y);
	while(!qx.empty()) {
		x = qx.front(); y = qy.front();
		qx.pop(); qy.pop();

		if (step[x][y] == k)
			break;

		for (int i = 0; i < 4; i++) {
			if (x + dirx[i] >= 0 && x + dirx[i] < n && y + diry[i] >= 0 && y + diry[i] < n) {
				if (len[x][y] + vec[x + dirx[i]][y + diry[i]] > len[x + dirx[i]][y + diry[i]]) {
					qx.push(x + dirx[i]);
					qy.push(y + diry[i]);
					len[x + dirx[i]][y + diry[i]] = len[x][y] + vec[x + dirx[i]][y + diry[i]];
					step[x + dirx[i]][y + diry[i]] = step[x][y] + 1;
				}
			}
		}

	}

	int max = 0;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (len[i][j] > max)
				max = len[i][j];
		}
	}

	cout << max;

	//system("pause");
	return 0;
}